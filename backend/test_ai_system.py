#!/usr/bin/env python3
"""
Script de teste r√°pido para o sistema de IA de evacua√ß√£o.
Verifica se todos os componentes est√£o funcionando corretamente.
"""

import sys
import os
import time
import traceback

# Adicionar diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todas as importa√ß√µes est√£o funcionando."""
    print("üîç Testando importa√ß√µes...")
    
    try:
        from services.traffic_ai_service import traffic_ai_service
        print("  ‚úÖ Traffic AI Service")
    except Exception as e:
        print(f"  ‚ùå Traffic AI Service: {e}")
        return False
    
    try:
        from services.traffic_assignment import coordination_system
        print("  ‚úÖ Traffic Assignment (RL)")
    except Exception as e:
        print(f"  ‚ùå Traffic Assignment: {e}")
        return False
    
    try:
        from services.realtime_websocket import realtime_service
        print("  ‚úÖ Realtime WebSocket")
    except Exception as e:
        print(f"  ‚ùå Realtime WebSocket: {e}")
        return False
    
    try:
        from services.integrated_evacuation_service import integrated_evacuation_service
        print("  ‚úÖ Integrated Evacuation Service")
    except Exception as e:
        print(f"  ‚ùå Integrated Evacuation Service: {e}")
        return False
    
    try:
        from config.ai_config import DEFAULT_CONFIG
        print("  ‚úÖ AI Configuration")
    except Exception as e:
        print(f"  ‚ùå AI Configuration: {e}")
        return False
    
    return True

def test_basic_functionality():
    """Testa funcionalidades b√°sicas dos servi√ßos."""
    print("\nüß™ Testando funcionalidades b√°sicas...")
    
    try:
        from services.traffic_ai_service import traffic_ai_service
        from config.ai_config import DEFAULT_CONFIG
        
        # Testar carregamento de rede (simulado)
        print("  üîÑ Testando carregamento de rede vi√°ria...")
        # Nota: Este teste pode falhar se n√£o houver internet ou OSMnx n√£o estiver configurado
        # network_result = traffic_ai_service.load_road_network(
        #     center_point=(-23.5505, -46.6333),
        #     radius_km=5
        # )
        print("  ‚ö†Ô∏è  Carregamento de rede pulado (requer internet)")
        
        # Testar gera√ß√£o de dados sint√©ticos ML
        print("  ü§ñ Testando gera√ß√£o de dados sint√©ticos ML...")
        X, y = traffic_ai_service._generate_synthetic_training_data()
        print(f"  ‚úÖ Dados gerados: {len(X)} amostras, {X.shape[1]} features")
        
        # Testar configura√ß√£o
        print("  ‚öôÔ∏è  Testando configura√ß√µes...")
        config = DEFAULT_CONFIG
        print(f"  ‚úÖ Configura√ß√£o carregada: BPR Œ±={config.bpr.alpha}, Œ≤={config.bpr.beta}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro na funcionalidade b√°sica: {e}")
        traceback.print_exc()
        return False

def test_ml_model():
    """Testa treinamento e predi√ß√£o do modelo ML."""
    print("\nü§ñ Testando modelo ML...")
    
    try:
        from services.traffic_ai_service import traffic_ai_service
        
        # Treinar modelo
        print("  üìö Treinando modelo ML...")
        train_result = traffic_ai_service.train_ml_model(synthetic_data=True)
        
        if train_result["success"]:
            print(f"  ‚úÖ Modelo treinado: score={train_result['test_score']:.3f}")
            
            # Testar predi√ß√£o
            print("  üîÆ Testando predi√ß√£o...")
            features = {
                "hour": 14,
                "rainfall": 2,
                "visibility": 8,
                "wind_speed": 10,
                "grade": 3,
                "surface_type": 0,
                "lanes": 2
            }
            
            prediction = traffic_ai_service.predict_travel_time(features)
            print(f"  ‚úÖ Predi√ß√£o: {prediction:.1f} segundos")
            
            return True
        else:
            print(f"  ‚ùå Erro no treinamento: {train_result['error']}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erro no modelo ML: {e}")
        traceback.print_exc()
        return False

def test_rl_controller():
    """Testa controlador RL."""
    print("\nüß† Testando controlador RL...")
    
    try:
        from services.traffic_assignment import TrafficRLController, IntersectionState
        
        # Criar controlador
        controller = TrafficRLController("test_intersection", 4)
        print("  ‚úÖ Controlador RL criado")
        
        # Testar estado
        state = IntersectionState(
            queue_lengths=[10, 8, 12, 6],
            flow_rates=[20, 18, 25, 15],
            waiting_times=[30, 25, 35, 20],
            phase_duration=0,
            time_of_day=8.0,
            weather_condition=0
        )
        
        # Testar sele√ß√£o de a√ß√£o
        action = controller.select_action(state, training=False)
        print(f"  ‚úÖ A√ß√£o selecionada: {action}")
        
        # Testar c√°lculo de recompensa
        next_state = IntersectionState(
            queue_lengths=[8, 6, 10, 4],
            flow_rates=[25, 20, 30, 18],
            waiting_times=[20, 15, 25, 10],
            phase_duration=30,
            time_of_day=8.1,
            weather_condition=0
        )
        
        reward = controller.calculate_reward(state, next_state, action)
        print(f"  ‚úÖ Recompensa calculada: {reward:.3f}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro no controlador RL: {e}")
        traceback.print_exc()
        return False

def test_websocket_service():
    """Testa servi√ßo WebSocket."""
    print("\nüåê Testando servi√ßo WebSocket...")
    
    try:
        from services.realtime_websocket import realtime_service, WebSocketMessage, MessageType
        
        # Testar cria√ß√£o de mensagem
        message = WebSocketMessage(
            message_type=MessageType.TRAFFIC_UPDATE.value,
            timestamp=time.time(),
            data={"test": "data"}
        )
        print("  ‚úÖ Mensagem WebSocket criada")
        
        # Testar estat√≠sticas
        stats = realtime_service.get_connection_stats()
        print(f"  ‚úÖ Estat√≠sticas: {stats['active_connections']} conex√µes")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro no servi√ßo WebSocket: {e}")
        traceback.print_exc()
        return False

def test_integrated_service():
    """Testa servi√ßo integrado."""
    print("\nüîó Testando servi√ßo integrado...")
    
    try:
        from services.integrated_evacuation_service import integrated_evacuation_service
        
        # Testar listagem de cen√°rios
        scenarios = integrated_evacuation_service.list_active_scenarios()
        print(f"  ‚úÖ Cen√°rios ativos: {scenarios['active_scenarios']}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro no servi√ßo integrado: {e}")
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal do teste."""
    print("üß≠ COSMOS SENTINEL - TESTE DO SISTEMA DE IA")
    print("=" * 50)
    
    tests = [
        ("Importa√ß√µes", test_imports),
        ("Funcionalidades B√°sicas", test_basic_functionality),
        ("Modelo ML", test_ml_model),
        ("Controlador RL", test_rl_controller),
        ("Servi√ßo WebSocket", test_websocket_service),
        ("Servi√ßo Integrado", test_integrated_service)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)
        
        try:
            success = test_func()
            results.append((test_name, success))
            
            if success:
                print(f"‚úÖ {test_name}: PASSOU")
            else:
                print(f"‚ùå {test_name}: FALHOU")
                
        except Exception as e:
            print(f"üí• {test_name}: ERRO CR√çTICO - {e}")
            results.append((test_name, False))
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"{status} - {test_name}")
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema pronto para uso.")
        return 0
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM. Verifique os erros acima.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
