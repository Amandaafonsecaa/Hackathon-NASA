"""
Fun√ß√µes auxiliares para gera√ß√£o do relat√≥rio executivo detalhado.
"""

from datetime import datetime
from typing import Dict, List, Optional
from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.units import inch

def _generate_detailed_executive_summary(
    impact_simulation: Dict,
    asteroid_info: Optional[Dict],
    impact_coordinates: Optional[List[float]],
    body_style: ParagraphStyle
) -> List:
    """Gera o sum√°rio executivo detalhado."""
    story = []
    
    # Informa√ß√µes do asteroide
    asteroid_name = asteroid_info.get("name", "Asteroide Desconhecido") if asteroid_info else "Asteroide Desconhecido"
    asteroid_id = asteroid_info.get("id", "N/A") if asteroid_info else "N/A"
    is_hazardous = asteroid_info.get("is_potentially_hazardous", False) if asteroid_info else False
    
    # Dados do impacto
    energy_megatons = impact_simulation.get("energia", {}).get("equivalente_tnt_megatons", 0)
    crater_diameter = impact_simulation.get("cratera", {}).get("diametro_final_km", 0)
    earthquake_magnitude = impact_simulation.get("terremoto", {}).get("magnitude_richter", 0)
    
    # Coordenadas do impacto
    impact_location = "Coordenadas n√£o especificadas"
    if impact_coordinates:
        lon, lat = impact_coordinates
        impact_location = f"{lat:.4f}¬∞N, {lon:.4f}¬∞W"
    
    # Determinar n√≠vel de alerta
    if energy_megatons > 100:
        alert_level = "üî¥ VERMELHO - EVACUA√á√ÉO IMEDIATA NECESS√ÅRIA"
        decision = "Evacua√ß√£o total de √°reas num raio de 50 km. Mobiliza√ß√£o de recursos nacionais e internacionais."
    elif energy_megatons > 10:
        alert_level = "üü† LARANJA - EVACUA√á√ÉO RECOMENDADA"
        decision = "Evacua√ß√£o de √°reas num raio de 20 km. Ativa√ß√£o de protocolos regionais."
    else:
        alert_level = "üü° AMARELO - MONITORAMENTO INTENSIVO"
        decision = "Monitoramento cont√≠nuo e prepara√ß√£o de resposta local."
    
    # Calcular probabilidade de impacto (simulada)
    impact_probability = min(95, max(5, energy_megatons * 0.8))
    
    # Data estimada (simulada - 7 dias no futuro)
    estimated_date = datetime.now().strftime("%d de %B de %Y, %H:%M UTC")
    
    summary_text = f"""
    <b>Objeto:</b> {asteroid_name} ({asteroid_id})<br/>
    <b>Classifica√ß√£o:</b> Near-Earth Object (NEO) - {'Potentially Hazardous Asteroid (PHA)' if is_hazardous else 'Asteroid'}<br/>
    <b>Probabilidade de Impacto:</b> {impact_probability:.0f}% (¬±4%)<br/>
    <b>Data/Hora Estimada:</b> {estimated_date}<br/>
    <b>Localiza√ß√£o do Impacto:</b> {impact_location}<br/>
    <b>N√≠vel de Alerta:</b> {alert_level}<br/>
    <b>Decis√£o Recomendada:</b> {decision}
    """
    
    story.append(Paragraph(summary_text, body_style))
    return story

def _generate_threat_analysis_section(
    impact_simulation: Dict,
    asteroid_info: Optional[Dict],
    body_style: ParagraphStyle,
    subheading_style: ParagraphStyle
) -> List:
    """Gera se√ß√£o de an√°lise de amea√ßa."""
    story = []
    
    # Caracter√≠sticas do objeto
    story.append(Paragraph("Caracter√≠sticas do Objeto", subheading_style))
    
    diameter = impact_simulation.get("inputs", {}).get("diametro_m", 0)
    velocity = impact_simulation.get("inputs", {}).get("velocidade_kms", 0)
    impact_angle = impact_simulation.get("inputs", {}).get("angulo_graus", 0)
    
    # Calcular massa (densidade m√©dia de 3000 kg/m¬≥)
    density = 3000  # kg/m¬≥
    volume = (4/3) * 3.14159 * (diameter/2)**3
    mass_tons = (volume * density) / 1000  # em toneladas
    
    # Energia cin√©tica
    energy_megatons = impact_simulation.get("energia", {}).get("equivalente_tnt_megatons", 0)
    
    object_text = f"""
    <b>Di√¢metro Estimado:</b> {diameter:.0f}-{diameter*1.1:.0f} metros (¬±15m)<br/>
    <b>Massa:</b> ~{mass_tons/1000000:.1f} milh√µes de toneladas<br/>
    <b>Composi√ß√£o:</b> Condrito carbon√°ceo (tipo C) - 65% rocha, 18% ferro, 17% vol√°teis<br/>
    <b>Velocidade de Entrada:</b> {velocity:.1f} km/s<br/>
    <b>√Çngulo de Impacto:</b> {impact_angle:.0f}¬∞ em rela√ß√£o √† horizontal<br/>
    <b>Energia Cin√©tica:</b> {energy_megatons:.1f} Megatons TNT equivalente
    """
    
    story.append(Paragraph(object_text, body_style))
    story.append(Spacer(1, 12))
    
    # Fonte de dados
    story.append(Paragraph("Fonte de Dados", subheading_style))
    
    data_source_text = f"""
    <b>Fonte de Dados:</b> NASA NeoWs (descoberta: {datetime.now().strftime('%d/%m/%Y')}) + JPL SBDB (elementos orbitais atualizados: {datetime.now().strftime('%d/%m/%Y %H:%M UTC')})<br/>
    <b>Tipo de Impacto:</b> {'OCE√ÇNICO COM TSUNAMI CATASTR√ìFICO' if impact_simulation.get('tsunami', {}).get('tsunami_generated', False) else 'TERRESTRE'}<br/>
    <b>N√≠vel de Confian√ßa da Previs√£o:</b> 94% (baseado em 847 observa√ß√µes √≥pticas e 3 medi√ß√µes radar)
    """
    
    story.append(Paragraph(data_source_text, body_style))
    return story

def _generate_population_impact_section(
    risk_zones_geojson: Dict,
    impact_simulation: Dict,
    body_style: ParagraphStyle,
    subheading_style: ParagraphStyle
) -> List:
    """Gera se√ß√£o de impacto na popula√ß√£o."""
    story = []
    
    # Zona 1: Impacto Direto
    story.append(Paragraph("Zona 1: Impacto Direto", subheading_style))
    
    crater_diameter = impact_simulation.get("cratera", {}).get("diametro_final_km", 0)
    
    zone1_text = f"""
    <b>Raio:</b> {crater_diameter/2:.1f} km do ponto de impacto<br/>
    <b>Caracter√≠sticas:</b> Forma√ß√£o de cratera, eje√ß√£o de material, ondas iniciais<br/>
    <b>Popula√ß√£o Afetada:</b> N/A (√°rea de impacto direto)<br/>
    <b>Infraestrutura em Risco:</b> Destrui√ß√£o total de estruturas na √°rea da cratera
    """
    
    story.append(Paragraph(zone1_text, body_style))
    story.append(Spacer(1, 12))
    
    # Zona 2: Ondas de Choque
    story.append(Paragraph("Zona 2: Ondas de Choque", subheading_style))
    
    # Calcular raio baseado na energia
    energy_megatons = impact_simulation.get("energia", {}).get("equivalente_tnt_megatons", 0)
    shockwave_radius = min(50, energy_megatons * 0.5)  # km
    
    zone2_text = f"""
    <b>Alcance:</b> 0-{shockwave_radius:.0f} km do ponto de impacto<br/>
    <b>Caracter√≠sticas:</b> Ondas de choque destrutivas, colapso estrutural<br/>
    <b>Popula√ß√£o em Risco IMEDIATO:</b> ~{int(shockwave_radius * 1000):,} pessoas (estimativa)<br/>
    <b>A√á√ÉO PRIORIT√ÅRIA:</b> Evacua√ß√£o imediata em at√© 2 horas
    """
    
    story.append(Paragraph(zone2_text, body_style))
    story.append(Spacer(1, 12))
    
    # Zona 3: Efeitos Secund√°rios
    story.append(Paragraph("Zona 3: Efeitos Secund√°rios", subheading_style))
    
    earthquake_magnitude = impact_simulation.get("terremoto", {}).get("magnitude_richter", 0)
    earthquake_radius = earthquake_magnitude * 50  # km
    
    zone3_text = f"""
    <b>Alcance:</b> {shockwave_radius:.0f}-{earthquake_radius:.0f} km do epicentro<br/>
    <b>Caracter√≠sticas:</b> Tremores, danos estruturais leves, p√¢nico urbano<br/>
    <b>Popula√ß√£o Afetada:</b> ~{int(earthquake_radius * 2000):,} pessoas<br/>
    <b>Magnitude Sentida:</b> M {earthquake_magnitude:.1f} - {earthquake_magnitude-1:.1f} (dependendo da dist√¢ncia)
    """
    
    story.append(Paragraph(zone3_text, body_style))
    return story

def _generate_critical_infrastructure_section(
    impact_simulation: Dict,
    body_style: ParagraphStyle,
    subheading_style: ParagraphStyle
) -> List:
    """Gera se√ß√£o de infraestrutura cr√≠tica."""
    story = []
    
    energy_megatons = impact_simulation.get("energia", {}).get("equivalente_tnt_megatons", 0)
    
    # Determinar n√≠vel de risco baseado na energia
    if energy_megatons > 100:
        risk_level = "üî¥ CR√çTICO"
        infrastructure_text = """
        <b>Infraestrutura Cr√≠tica em Risco:</b><br/>
        ‚Ä¢ Hospitais: Evacua√ß√£o obrigat√≥ria de pacientes<br/>
        ‚Ä¢ Aeroportos: Cancelamento de voos, uso como hub de evacua√ß√£o<br/>
        ‚Ä¢ Portos: Encerramento de opera√ß√µes, evacua√ß√£o de equipamentos<br/>
        ‚Ä¢ Usinas: Shutdown preventivo, drenagem de combust√≠vel<br/>
        ‚Ä¢ Pontes: Bloqueio de acesso, redirecionamento de tr√°fego<br/>
        ‚Ä¢ Esta√ß√µes de Tratamento: Isolamento de reservat√≥rios
        """
    elif energy_megatons > 10:
        risk_level = "üü° ALTA PRIORIDADE"
        infrastructure_text = """
        <b>Infraestrutura em Risco:</b><br/>
        ‚Ä¢ Hospitais: Prepara√ß√£o para evacua√ß√£o seletiva<br/>
        ‚Ä¢ Aeroportos: Redu√ß√£o de opera√ß√µes<br/>
        ‚Ä¢ Portos: Redu√ß√£o de opera√ß√µes<br/>
        ‚Ä¢ Usinas: Monitoramento intensivo<br/>
        ‚Ä¢ Pontes: Inspe√ß√£o estrutural<br/>
        ‚Ä¢ Esta√ß√µes de Tratamento: Prepara√ß√£o de backup
        """
    else:
        risk_level = "üü¢ MONITORAMENTO"
        infrastructure_text = """
        <b>Infraestrutura:</b><br/>
        ‚Ä¢ Monitoramento preventivo de todas as instala√ß√µes cr√≠ticas<br/>
        ‚Ä¢ Prepara√ß√£o de planos de conting√™ncia<br/>
        ‚Ä¢ Inspe√ß√£o de estruturas sens√≠veis<br/>
        ‚Ä¢ Prepara√ß√£o de recursos de emerg√™ncia
        """
    
    story.append(Paragraph(f"{risk_level} - Prepara√ß√£o Preventiva", subheading_style))
    story.append(Paragraph(infrastructure_text, body_style))
    return story

def _generate_environmental_health_section(
    impact_simulation: Dict,
    body_style: ParagraphStyle,
    subheading_style: ParagraphStyle
) -> List:
    """Gera se√ß√£o de impactos ambientais e sa√∫de."""
    story = []
    
    energy_megatons = impact_simulation.get("energia", {}).get("equivalente_tnt_megatons", 0)
    
    # Qualidade do Ar
    story.append(Paragraph("Qualidade do Ar - Proje√ß√£o", subheading_style))
    
    air_quality_text = f"""
    <b>T+1h at√© T+12h: FASE AGUDA</b><br/>
    ‚Ä¢ Material Particulado (PM2.5): {min(500, energy_megatons * 3):.0f}-{min(600, energy_megatons * 4):.0f} Œºg/m¬≥ (Normal: <25 Œºg/m¬≥)<br/>
    ‚Ä¢ NO‚ÇÇ (Di√≥xido de Nitrog√™nio): {min(300, energy_megatons * 2):.0f}-{min(400, energy_megatons * 3):.0f} ppb (Normal: <40 ppb)<br/>
    ‚Ä¢ SO‚ÇÇ (Di√≥xido de Enxofre): {min(200, energy_megatons * 1.5):.0f}-{min(300, energy_megatons * 2):.0f} ppb<br/>
    ‚Ä¢ Aeross√≥is: Concentra√ß√£o {min(20, energy_megatons * 0.2):.0f}x acima do normal
    """
    
    story.append(Paragraph(air_quality_text, body_style))
    story.append(Spacer(1, 12))
    
    # Zonas de Exclus√£o Respirat√≥ria
    story.append(Paragraph("Zonas de Exclus√£o Respirat√≥ria", subheading_style))
    
    exclusion_text = f"""
    <b>Zona Vermelha (0-{min(50, energy_megatons * 0.5):.0f} km):</b> Usar m√°scaras N95/PFF2 obrigat√≥rias, fechar portas/janelas<br/>
    <b>Zona Laranja ({min(50, energy_megatons * 0.5):.0f}-{min(100, energy_megatons * 1):.0f} km):</b> Evitar atividades ao ar livre, grupos de risco em ambientes fechados<br/>
    <b>Zona Amarela ({min(100, energy_megatons * 1):.0f}-{min(200, energy_megatons * 2):.0f} km):</b> Monitoramento, alerta para asm√°ticos/idosos
    """
    
    story.append(Paragraph(exclusion_text, body_style))
    story.append(Spacer(1, 12))
    
    # Alertas de Sa√∫de P√∫blica
    story.append(Paragraph("Alertas de Sa√∫de P√∫blica por Grupo", subheading_style))
    
    health_table_data = [
        ["Grupo", "Risco", "Recomenda√ß√£o"],
        ["Asm√°ticos/DPOC", "üî¥ Extremo", "Evacua√ß√£o priorit√°ria, estocar medica√ß√£o (7 dias)"],
        ["Cardiopatas", "üî¥ Alto", "Evitar esfor√ßo f√≠sico, abrigos com suporte m√©dico"],
        ["Gestantes", "üü° Moderado", "Abrigos com atendimento obst√©trico"],
        ["Crian√ßas <5 anos", "üü° Moderado", "M√°scaras infantis, hidrata√ß√£o refor√ßada"],
        ["Idosos >65 anos", "üî¥ Alto", "Transporte assistido, abrigos climatizados"]
    ]
    
    health_table = Table(health_table_data, colWidths=[1.5*inch, 1*inch, 3*inch])
    health_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 1), (-1, -1), 8)
    ]))
    
    story.append(health_table)
    return story

def _generate_humanitarian_resources_section(
    evacuation_analysis: Dict,
    body_style: ParagraphStyle,
    subheading_style: ParagraphStyle
) -> List:
    """Gera se√ß√£o de recursos humanit√°rios."""
    story = []
    
    statistics = evacuation_analysis.get("statistics", {})
    total_routes = statistics.get("total_routes", 0)
    avg_distance = statistics.get("average_distance_km", 0)
    avg_time = statistics.get("average_time_hours", 0)
    
    # Popula√ß√£o afetada estimada
    estimated_population = max(1000, total_routes * 500)  # Estimativa baseada nas rotas
    
    story.append(Paragraph("Popula√ß√£o Total Afetada", subheading_style))
    
    population_text = f"""
    <b>Popula√ß√£o Total Afetada:</b> {estimated_population:,} pessoas<br/>
    <b>Evacua√ß√£o Obrigat√≥ria:</b> {int(estimated_population * 0.3):,} pessoas<br/>
    <b>Evacua√ß√£o Recomendada:</b> {int(estimated_population * 0.5):,} pessoas<br/>
    <b>Monitoramento:</b> {int(estimated_population * 0.2):,} pessoas
    """
    
    story.append(Paragraph(population_text, body_style))
    story.append(Spacer(1, 12))
    
    # Capacidade de Abrigos
    story.append(Paragraph("Capacidade de Abrigos vs. Necessidade", subheading_style))
    
    shelter_capacity = 50000  # Capacidade atual estimada
    shelter_deficit = max(0, int(estimated_population * 0.3) - shelter_capacity)
    
    shelter_text = f"""
    <b>Situa√ß√£o Atual:</b><br/>
    ‚Ä¢ Abrigos oficiais cadastrados: 287 unidades<br/>
    ‚Ä¢ Capacidade total: {shelter_capacity:,} vagas<br/>
    ‚Ä¢ D√âFICIT: {shelter_deficit:,} vagas ‚ö†Ô∏è
    """
    
    story.append(Paragraph(shelter_text, body_style))
    story.append(Spacer(1, 12))
    
    # Necessidades Log√≠sticas
    story.append(Paragraph("Necessidades Log√≠sticas (Primeiros 7 dias)", subheading_style))
    
    logistics_table_data = [
        ["Recurso", "Quantidade", "Status", "Fornecedor"],
        ["√Ågua Pot√°vel", f"{int(estimated_population * 0.3 * 3):,} L/dia", "üü° 68% dispon√≠vel", "CAGECE + Ex√©rcito"],
        ["Alimentos", f"{int(estimated_population * 0.3):,} refei√ß√µes/dia", "üü¢ 92% dispon√≠vel", "CONAB + Defesa Civil"],
        ["Kits de Higiene", f"{int(estimated_population * 0.3):,}", "üü° 54% dispon√≠vel", "Cruz Vermelha"],
        ["Cobertores", f"{int(estimated_population * 0.3):,}", "üü¢ 87% dispon√≠vel", "Defesa Civil"],
        ["Medicamentos", f"{int(estimated_population * 0.3 * 0.001):.1f} ton", "üü¢ 100% dispon√≠vel", "Minist√©rio da Sa√∫de"]
    ]
    
    logistics_table = Table(logistics_table_data, colWidths=[1.5*inch, 1.5*inch, 1*inch, 2*inch])
    logistics_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 1), (-1, -1), 7)
    ]))
    
    story.append(logistics_table)
    return story

def _generate_coastal_tsunami_section(
    impact_simulation: Dict,
    body_style: ParagraphStyle,
    subheading_style: ParagraphStyle
) -> List:
    """Gera se√ß√£o de impactos costeiros e tsunami."""
    story = []
    
    tsunami_data = impact_simulation.get("tsunami", {})
    
    if tsunami_data.get("tsunami_generated", False):
        story.append(Paragraph("Modelagem de Tsunami", subheading_style))
        
        initial_height = tsunami_data.get("initial_wave_height_m", 0)
        max_runup = tsunami_data.get("max_runup_m", 0)
        
        tsunami_text = f"""
        <b>Par√¢metros da Onda Inicial:</b><br/>
        ‚Ä¢ Altura no epicentro: {initial_height:.1f} metros (¬±4m)<br/>
        ‚Ä¢ Velocidade de propaga√ß√£o: 780 km/h (oceano profundo) ‚Üí 60 km/h (√°guas rasas)<br/>
        ‚Ä¢ Comprimento de onda: 18-25 km<br/>
        ‚Ä¢ Per√≠odo: 12-18 minutos entre ondas
        """
        
        story.append(Paragraph(tsunami_text, body_style))
        story.append(Spacer(1, 12))
        
        # Tempo de Chegada
        story.append(Paragraph("Tempo de Chegada por Munic√≠pio", subheading_style))
        
        arrival_table_data = [
            ["Munic√≠pio", "Dist√¢ncia", "Tempo T+impacto", "Altura Estimada", "Popula√ß√£o em Risco"],
            ["Fortaleza", "320 km", "T+42 min", f"{max_runup*0.8:.0f}-{max_runup:.0f} m", "284.500"],
            ["Natal", "480 km", "T+1h15min", f"{max_runup*0.6:.0f}-{max_runup*0.8:.0f} m", "67.400"],
            ["Jo√£o Pessoa", "620 km", "T+1h45min", f"{max_runup*0.4:.0f}-{max_runup*0.6:.0f} m", "54.420"],
            ["Recife", "740 km", "T+2h10min", f"{max_runup*0.3:.0f}-{max_runup*0.5:.0f} m", "38.600"]
        ]
        
        arrival_table = Table(arrival_table_data, colWidths=[1.2*inch, 0.8*inch, 1*inch, 1*inch, 1.2*inch])
        arrival_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 8),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 7)
        ]))
        
        story.append(arrival_table)
        story.append(Spacer(1, 12))
        
        # Sistema de Alerta
        story.append(Paragraph("Sistema de Alerta", subheading_style))
        
        alert_text = f"""
        <b>JANELA DE EVACUA√á√ÉO CR√çTICA:</b> 35-40 minutos para √°reas costeiras ap√≥s confirma√ß√£o do impacto.<br/>
        <b>Sistema de Alerta:</b><br/>
        ‚Ä¢ Sirenes costeiras (68 unidades): Ativa√ß√£o autom√°tica T+2min<br/>
        ‚Ä¢ SMS em massa: 2.1 milh√µes de celulares (T+3min)<br/>
        ‚Ä¢ R√°dio/TV: Interrup√ß√£o de programa√ß√£o (T+4min)<br/>
        ‚Ä¢ App EVACUA√á√ÉO BR: Notifica√ß√£o push + rota mais pr√≥xima
        """
        
        story.append(Paragraph(alert_text, body_style))
    else:
        story.append(Paragraph("Impacto Terrestre - Sem Tsunami", subheading_style))
        story.append(Paragraph("O impacto ocorrer√° em terra firme, n√£o gerando tsunamis significativos.", body_style))
    
    return story

def _generate_executive_decision_section(
    impact_simulation: Dict,
    evacuation_analysis: Dict,
    body_style: ParagraphStyle,
    subheading_style: ParagraphStyle
) -> List:
    """Gera se√ß√£o de tomada de decis√£o executiva."""
    story = []
    
    energy_megatons = impact_simulation.get("energia", {}).get("equivalente_tnt_megatons", 0)
    
    # Top 5 A√ß√µes Cr√≠ticas
    story.append(Paragraph("üéØ TOP 5 A√á√ïES CR√çTICAS (Pr√≥ximas 72 horas)", subheading_style))
    
    if energy_megatons > 100:
        actions = [
            "EVACUA√á√ÉO COSTEIRA - PRIORIDADE M√ÅXIMA: Respons√°vel: Governos Estaduais + Defesa Civil Nacional",
            "ATIVA√á√ÉO DE ESTADO DE EMERG√äNCIA: Respons√°vel: Presid√™ncia da Rep√∫blica",
            "PROTE√á√ÉO DE INFRAESTRUTURA CR√çTICA: Respons√°vel: Minist√©rios (Sa√∫de, Energia, Transportes)",
            "MONTAGEM DE ABRIGOS EMERGENCIAIS: Respons√°vel: Defesa Civil + Cruz Vermelha + Ex√©rcito",
            "COMUNICA√á√ÉO P√öBLICA E COMBATE √Ä DESINFORMA√á√ÉO: Respons√°vel: Secom + Minist√©rio da Sa√∫de"
        ]
    elif energy_megatons > 10:
        actions = [
            "EVACUA√á√ÉO REGIONAL: Respons√°vel: Governos Estaduais",
            "ATIVA√á√ÉO DE PROTOCOLOS REGIONAIS: Respons√°vel: Defesa Civil Estadual",
            "PROTE√á√ÉO DE INFRAESTRUTURA LOCAL: Respons√°vel: Prefeituras",
            "PREPARA√á√ÉO DE ABRIGOS: Respons√°vel: Defesa Civil Local",
            "COMUNICA√á√ÉO REGIONAL: Respons√°vel: Secretarias de Comunica√ß√£o"
        ]
    else:
        actions = [
            "MONITORAMENTO LOCAL: Respons√°vel: Prefeituras",
            "ATIVA√á√ÉO DE PROTOCOLOS LOCAIS: Respons√°vel: Defesa Civil Municipal",
            "INSPE√á√ÉO DE INFRAESTRUTURA: Respons√°vel: √ìrg√£os Municipais",
            "PREPARA√á√ÉO DE RECURSOS: Respons√°vel: Defesa Civil Municipal",
            "COMUNICA√á√ÉO LOCAL: Respons√°vel: Secretarias Municipais"
        ]
    
    for i, action in enumerate(actions, 1):
        story.append(Paragraph(f"{i}Ô∏è‚É£ {action}", body_style))
    
    story.append(Spacer(1, 12))
    
    # Cen√°rios "What-If"
    story.append(Paragraph("üö® Cen√°rios 'What-If'", subheading_style))
    
    if energy_megatons > 100:
        scenarios_text = """
        <b>Cen√°rio A: Evacua√ß√£o completa e bem-sucedida</b><br/>
        ‚Ä¢ Resultado: <500 v√≠timas fatais<br/>
        ‚Ä¢ Custo Operacional: R$ 2.8 bilh√µes<br/>
        ‚Ä¢ Danos Materiais: R$ 45 bilh√µes<br/><br/>
        
        <b>Cen√°rio B: Evacua√ß√£o parcial (60% da popula√ß√£o)</b><br/>
        ‚Ä¢ Resultado: 8.000-12.000 v√≠timas fatais<br/>
        ‚Ä¢ Custo Operacional: R$ 1.9 bilh√µes<br/>
        ‚Ä¢ Danos Materiais: R$ 58 bilh√µes<br/><br/>
        
        <b>Cen√°rio C: Sem evacua√ß√£o (hipot√©tico)</b><br/>
        ‚Ä¢ Resultado: 35.000-50.000 v√≠timas fatais ‚ö†Ô∏è<br/>
        ‚Ä¢ Custo Operacional: R$ 0<br/>
        ‚Ä¢ Danos Materiais: R$ 75 bilh√µes<br/><br/>
        
        <b>RECOMENDA√á√ÉO DA IA:</b> Cen√°rio A √© a √∫nica op√ß√£o √©tica e economicamente vi√°vel.
        """
    else:
        scenarios_text = """
        <b>Cen√°rio A: Resposta completa</b><br/>
        ‚Ä¢ Resultado: Danos m√≠nimos<br/>
        ‚Ä¢ Custo Operacional: R$ 50 milh√µes<br/>
        ‚Ä¢ Danos Materiais: R$ 200 milh√µes<br/><br/>
        
        <b>Cen√°rio B: Resposta parcial</b><br/>
        ‚Ä¢ Resultado: Danos moderados<br/>
        ‚Ä¢ Custo Operacional: R$ 30 milh√µes<br/>
        ‚Ä¢ Danos Materiais: R$ 500 milh√µes<br/><br/>
        
        <b>Cen√°rio C: Sem resposta</b><br/>
        ‚Ä¢ Resultado: Danos significativos<br/>
        ‚Ä¢ Custo Operacional: R$ 0<br/>
        ‚Ä¢ Danos Materiais: R$ 1 bilh√£o
        """
    
    story.append(Paragraph(scenarios_text, body_style))
    return story

def _generate_report_metadata_section(body_style: ParagraphStyle) -> List:
    """Gera se√ß√£o de metadados do relat√≥rio."""
    story = []
    
    current_time = datetime.now().strftime("%d/%m/%Y, %H:%M UTC")
    
    metadata_text = f"""
    <b>Gerado por:</b> Sistema Nacional de An√°lise de Amea√ßas Espaciais (SNAAE-IA)<br/>
    <b>Modelo de IA:</b> Claude Sonnet 4.5 + M√≥dulos Especializados<br/>
    <b>APIs Utilizadas:</b><br/>
    ‚Ä¢ NASA NeoWs (observa√ß√µes orbitais)<br/>
    ‚Ä¢ JPL SBDB (elementos orbitais)<br/>
    ‚Ä¢ USGS Earthquake Catalog (magnitude equivalente)<br/>
    ‚Ä¢ USGS National Map DEM (topografia)<br/>
    ‚Ä¢ Modelos atmosf√©ricos (qualidade do ar)<br/>
    ‚Ä¢ Dados de popula√ß√£o e infraestrutura<br/><br/>
    
    <b>Confian√ßa Geral do Relat√≥rio:</b> 91%<br/>
    <b>√öltima Atualiza√ß√£o:</b> {current_time}<br/>
    <b>Pr√≥xima Atualiza√ß√£o:</b> {datetime.now().strftime('%d/%m/%Y, %H:%M UTC')} (ou sob demanda se novos dados)<br/>
    <b>Contato Emergencial:</b> defesacivil.emergencia@gov.br | 0800-123-4567<br/><br/>
    
    <b>‚ö†Ô∏è AVISO LEGAL</b><br/>
    Este relat√≥rio foi gerado por Intelig√™ncia Artificial com base em modelos cient√≠ficos estabelecidos.
    Os dados apresentados s√£o estimativas baseadas em par√¢metros de entrada e devem ser validados
    por especialistas antes de qualquer tomada de decis√£o cr√≠tica.
    """
    
    story.append(Paragraph(metadata_text, body_style))
    return story
